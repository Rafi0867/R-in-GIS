#--- a dataset that comes with the sf package ---#
nc <- sf::st_read(system.file("Data/Chapter 2/nc.shp"))
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read(system.file("Data/Chapter 2/nc.shp", , package = "sf"))
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read(system.file("Data/Chapter 2/nc.shp", package = "sf"))
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"))
View(nc)
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
#--- checking the data class ---#
class(nc)
#--- take a look at the data ---#
head(nc)
plot(nc)
plot(nc$AREA)
#--- plotting the nc region in map ---#
ggplot(nc$AREA) +
geom_sf() +
theme_void()
plot(nc)
plot(nc)
p1 <- nc%>%
select(AREA)
View(p1)
plot(p1)
plot(nc%>%
select(AREA))
plot(nc%>%select(AREA))
#--- take a look at the sfg package ---#
sf::st_geometry(nc[1, ])[[1]][[1]]
#--- take a look at the data ---#
head(nc)
View(nc)
View(nc)
View(nc[[15]][[1]])
plot(sf::st_geometry(nc[1, ]))
plot(sf::st_geometry(nc[2, ]))
plot(sf::st_geometry(nc[1, ]))
plot(sf::st_geometry(nc[1, ])[[1]][[1]])
plot(sf::st_geometry(nc[1, ]))
plot(sf::st_geometry(nc[15, ]))
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
sf::st_geometry(nc[15, ]+
plot(sf::st_geometry(nc[15, ])+
geom_sf(st_geometry(nc[15, ]) +
geom_sf(st_geometry(nc[15, ]) +
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
plot(nc%>%select(AREA))
plot(nc%>%select(AREA))
plot(sf::st_geometry(nc[15, ]))
dplyr::select(nc, geometry)
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
plot(nc%>%select(AREA))
#--- creating a point geometry ---#
a_point <- sf::st_point(c(2,1))
#--- check the class of the newly created item ---#
class(a_point)
plot(a_pont)
plot(a_point)
#--- creating a point geometry ---#
a_point <- sf::st_point(c(4,1))
# The st_point() function creates a POINT object when supplied with a vector
# of two numeric values
#--- check the class of the newly created item ---#
class(a_point)
plot(a_point) # plotting the point that we created.
plot(a_point) # plotting the point that we created.
#--- creating a point geometry ---#
a_point <- sf::st_point(c(14,1))
plot(a_point) # plotting the point that we created.
#--- creating line string ---#
a_linestring <- rbind((1,2),(2,3),(3,4),(4,5))
#--- creating line string ---#
a_linestring <- rbind((1,2)(2,3)(3,4)(4,5))
#--- creating line string ---#
a_linestring <- rbind((1 2)(2 3)(3 4)(4 5))
#--- creating line string ---#
a_linestring <- rbind(c(((1 ,2)(2, 3)(3, 4)(4 ,5)))
#--- creating line string ---#
a_linestring <- rbind(c(((1,2), c(2, 3), c(3, 4), c(4 ,5)))
#--- creating line string ---#
a_linestring <- rbind(c(((1,2) c(2, 3) c(3, 4) c(4 ,5)))
#--- creating line string ---#
a_linestring <- rbind(c(1,2), c(2,3), c(3,4), c(4,1))
plot(a_linestring)
View(a_linestring)
#--- creating line string ---#
a_linestring <- rbind(c(1,2), c(1,3), c(3,1), c(3,4))
plot(a_linestring)
#--- creating line string ---#
a_linestring <- rbind(c(1,2), c(1,4), c(3,2), c(3,4))
plot(a_linestring)
#--- creating line string ---#
a_linestring <- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2,5), c(2.5,3.5))
plot(a_linestring)
#--- creating line string ---#
a_linestring <- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
plot(a_linestring)
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
#--- create a "LINESTRING" ---#
a_linestring <- sf::st_linestring(var)
plot(a_linestring)
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5), c(3,2.5), c(3, 3.5), c(4, 2.5), c(4,3.5))
plot(a_linestring)
#--- create a "LINESTRING" ---#
a_linestring <- sf::st_linestring(var)
#--- check the class ---#
class(a_linestring)
#--- create a "LINESTRING" ---#
a_linestring <- sf::st_linestring(var)
View(var)
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
plot(a_linestring)
#--- create a "LINESTRING" ---#
a_linestring <- sf::st_linestring(var)
#--- check the class ---#
class(a_linestring)
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
plot(a_linestring)
#--- create a "LINESTRING" ---#
a_linestring <- sf::st_linestring(var)
plot(a_linestring)
#--- check the class ---#
class(a_linestring)
#--- create a "LINESTRING" ---#
a_linestring <- st_linestring(var)
#--- check the class ---#
class(a_linestring)
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
#--- create a "LINESTRING" ---#
a_linestring <- st_linestring(var)
#--- check the class ---#
class(a_linestring)
plot(a_linestring)
#--- creating a point geometry ---#
a_point <- st_point(c(14,1))
# The st_point() function creates a POINT object when supplied with a vector
# of two numeric values
#--- check the class of the newly created item ---#
class(a_point)
plot(a_point) # plotting the point that we created.
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
#--- create a "LINESTRING" ---#
a_linestring <- st_linestring(var)
#--- check the class ---#
class(a_linestring)
plot(a_linestring)
plot(var)
plot(var)+plot(a_linestring)
plot(var)/plot(a_linestring)
plot(var)+plot(a_linestring)
plot(a_linestring)
#--- creating line string ---#
var<- rbind(c(2, 3), c(3, 4), c(3, 5), c(1, 5))
#--- create a "LINESTRING" ---#
a_linestring <- st_linestring(var)
plot(a_linestring)
plot(var)
plot(a_linestring)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(3, 0), c(3, 2), c(2, 5), c(1, 3), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(p1)
#creating the polygon
a_polygon <- st_polygon(p1, needClosed = TRUE)
#creating the polygon
a_polygon <- st_polygon(p1)
#creating the polygon
a_polygon <- sf::st_polygon(p1)
#creating the polygon
a_polygon <- st_polygon(list(p1))
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(2,3), c(2,4), c(4,3), c(4,4))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(2,3), c(2,4), c(4,3), c(4,4))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(2,3), c(2,4), c(4,3), c(4,5))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(2,3), c(5,2), c(4,3), c(4,5))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(3, 0), c(3, 2), c(2, 5), c(1, 3), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(2, 3), c(2, 4), c(4, 3), c(4, 4), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(0, 3), c(0, 4), c(4, 3), c(4, 4), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(0, 3), c(0, 4), c(4, 4), c(4, 3), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(0, 3), c(0, 4), c(4, 4), c(4, 0), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
pacman::p_load(
sf, # vector data operations
dplyr, # data wrangling
data.table, # data wrangling
tmap, # make maps
mapview, # create an interactive map
patchwork # arranging maps
)
library(ggplot2)
#===============================================================================
#     READING AND WRITING VECTOR DATA
#--- Reading shape files ---#
nc_loaded <- st_read("Data/Chapter 2/ nc.shp")
#===============================================================================
#     READING AND WRITING VECTOR DATA
#--- Reading shape files ---#
nc_loaded <- st_read("Data/Chapter 2/nc.shp")
plot(nc_loaded)
#--- writing to a shape file ---#
# this is actually converting the above sf objects into a shape file
st_write(
nc_loaded,
dsn = "Data/Chapter 2/trial1.shp",
driver = "ESRI Shapefile",
append = FALSE
)
#--- Now create a polygon and a line as st file and make a shape file ---#
# creating lines
line1 <- c(2,4)
line_1 <- st_line(line1)
line_1 <- st_linestring(line1)
#--- Now create a polygon and a line as st file and make a shape file ---#
# creating lines
line1 <- rbind(c(2,4), c(2,6))
line_1 <- st_linestring(line1)
#--- Now create a polygon and a line as st file and make a shape file ---#
# creating lines
line_points <- rbind(c(2,4), c(2,6))
line_1 <- st_linestring(line_points)
# creating polygons
polygons_points <- rbind(c(0,0), c(2,4), c(3,6), c(4,0))
polygons_1 <- st_polygon(polygons_points)
# creating polygons
polygons_points <- rbind(c(0,0), c(2,4), c(3,6), c(4,0), c(0,0))
polygons_1 <- st_polygon(polygons_points)
# creating polygons
polygons_points <- rbind(c(0,0), c(0,4), c(3,6), c(4,0), c(0,0))
polygons_1 <- st_polygon(polygons_points)
View(polygons_points)
# creating polygons
polygons_points <- rbind(c(0,0), c(0,4),  c(4,0), c(0,0))
polygons_1 <- st_polygon(polygons_points)
# creating polygons
polygons_points <- rbind(c(4, 0), c(5, 0), c(5, 3), c(4, 2), c(4, 0))
polygons_1 <- st_polygon(polygons_points)
polygons_1 <- st_polygon(list(polygons_points))
# make a combination
plot(line_1)
# make a combination
plot(list(line_1, polygons_1))
# make a combination
plot(polygons_1)
# write as a shape file
st_write(
polygons_1,
dsn = "Data/Chapter 2/trial2.shp",
driver = "ESRI Shapefile",
append = FALSE
)
#--- working with alternative to shape file ---#
#--- write as a gpkg file ---#
st_write(nc, dsn = "Data/nc.geojson", append = FALSE)
pacman::p_load(
sf, # vector data operations
dplyr, # data wrangling
data.table, # data wrangling
tmap, # make maps
mapview, # create an interactive map
patchwork, # arranging maps
ggplot2
)
#--- working with alternative to shape file ---#
#--- write as a gpkg file ---#
st_write(nc, dsn = "Data/nc.geojson", append = FALSE)
#--- read a geojson file ---#
nc <- sf::st_read("Data/nc.geojson")
print(nc)
plot(nc)
plot(nc$AREA)
ggplot(nc)+
geom_sf()
ggplot(nc$AREA)+
geom_sf()
ggplot(nc)+
geom_sf()
ggplot(nc)+
geom_sf()+
theme_void()
#--- write as a gpkg file ---#
sf::st_write(nc, dsn = "Data/nc.gpkg", append = FALSE)
#--- read a gpkg file ---#
nc <- sf::st_read("Data/nc.gpkg")
ggplot(nc)+
geom_sf()+
theme_void()
#===============================================================================
#--- Projection of different coordinate system ---#
st_crs(nc)
#--- transforming from sf to wsg84 ---#
nc_wsg84 <- st_transform(nc, 4326)
# printing the crs of the newly transformed object
st_crs(nc_wsg84)
#===============================================================================
#--- Projection of different coordinate system ---#
st_crs(nc)
ggplot(nc_wsg84)+
geom_sf()+
theme_void()
#--- convert again in NAD83 ---#
nc_nad83 <- st_transform(nc, 26917)
# see the straucture
st_crs(nc_nad83)
ggplot(nc_nad83)+geom_sf()+theme_void()
ggplot(nc_wsg84)+
geom_sf()+
theme_void()
ggplot(nc_nad83)+geom_sf()+theme_void()
pacman::p_load(
sf, # vector data operations
dplyr, # data wrangling
data.table, # data wrangling
tmap, # make maps
mapview, # create an interactive map
patchwork, # arranging maps
ggplot2
)
library(ggplot2)
#===============================================================================
#--- Projection of different coordinate system ---#
st_crs(nc)
#--- transforming from nad27 to wsg84 ---#
nc_wsg84 <- st_transform(nc, 4326)
# printing the crs of the newly transformed object
st_crs(nc_wsg84)
ggplot(nc_wsg84)+
geom_sf()+
theme_void()
#--- convert again in NAD83 ---#
nc_nad83 <- st_transform(nc, 26917)
# see the structure
st_crs(nc_nad83)
ggplot(nc_nad83)+geom_sf()+theme_void()
#--- transform ---#
nc_utm17N_2 <- sf::st_transform(nc_wgs84, sf::st_crs(nc_utm17N))
#===============================================================================
#--- Projection of different coordinate system ---#
st_crs(nc)
#--- transforming from nad27 to wsg84 ---#
nc_wsg84 <- st_transform(nc, 4326)
#--- transform ---#
nc_utm17N_2 <- sf::st_transform(nc_wgs84, sf::st_crs(nc_utm17N))
#--- transforming from nad27 to wsg84 ---#
nc_wgs84 <- st_transform(nc, 4326)
#--- transform ---#
nc_utm17N_2 <- sf::st_transform(nc_wgs84, sf::st_crs(nc_utm17N))
#--- transform of multiple objects ---#
nc_utm17N <- sf::st_transform(nc_wgs84, 26917)
#--- check if the transformation was successful ---#
sf::st_crs(nc_utm17N)
#--- transform ---#
nc_utm17N_2 <- sf::st_transform(nc_wgs84, sf::st_crs(nc_utm17N))
#--- check if the transformation was successful ---#
st_crs(nc_utm17N_2)
#--- quick view ---#
print(nc)
#--- quick view ---#
plot(nc)
#--- quickly plot only one variable from nc object
plot(nc$AREA)
ggplot(nc$AREA)+
geom_sf()+theme_void()
ggplot(nc)+
geom_sf()+theme_void()
ggplot(nc)+
geom_sf(AREA)+theme_void()
ggplot(nc)+
geom_sf(nc$AREA)+theme_void()
ggplot(nc$AREA)+
geom_sf()+theme_void()
plot(nc%>%select(AREA))
plot(nc %>% select(AREA))
#--- quick view
plot(nc)
(
tm_nc_polygons <- tm_shape(nc) + tm_polygons()
)
tmap_leaflet(tm_nc_polygons)
source("C:/Users/dewan/OneDrive - University of Georgia/Documents/R and GIS/r scripts/chapter 2 - sfg details.R", echo=TRUE)
source("C:/Users/dewan/OneDrive - University of Georgia/Documents/R and GIS/r scripts/chapter 2 - sfg details.R", echo=TRUE)
pacman::p_load(
sf, # vector data operations
dplyr, # data wrangling
data.table, # data wrangling
tmap, # make maps
mapview, # create an interactive map
patchwork, # arranging maps
ggplot2
)
library(ggplot2)
# created an interactive map
tmap_leaflet(tm_nc_polygons)
#===============================================================================
#---- Turning data frame with points into simple feature object ----
# load irrigation wells registration data
wells <- readRDS("Data/Chapter 2/well_registration.rds")
# see data class
class(wells)
# see data structure
str(wells)
View(wells)
# convert data frame variable into sf object
wells_sf <- st_as_sf(wells, coords = c("longdd", "latdd"))
# see the data class again
class(wells_sf)
str(wells_sf)
View(wells_sf)
#plot the point geometry
plot(wells_sf %>% select(geometry))
# check the crs
st_crs(wells_sf)
# put the crs 4269
st_crs(wells_sf) <- 4269
# now plot the coordinates
plot(wells_sf %>% select(geometry))
# check it again
st_crs(wells_sf)
plot(wells_sf)
View(wells_sf)
plot(wells_sf %>% select(acres))
ggplot(nc)+
geom_sf()
ggplot(nc)+
geom_sf()+
theme_void()
ggplot(nc)+
geom_sf(aes(wells_sf$acres))+
theme_void()
ggplot(nc)+
geom_sf()+
geom_sf(aes(data = wells_sf, x = acres)) +
theme_void()
ggplot(nc)+
geom_sf()+
geom_sf(aes(wells_sf, acres)) +
theme_void()
ggplot(nc)+
geom_sf()+
geom_sf() +
theme_void()
ggplot(wells_sf$acres)+
geom_sf()+
theme_void()
plot(wells_sf %>% select(acres))
#plot the point geometry
plot(wells_sf %>% select(acre)) #it represents nothing meaningful becuase
#plot the point geometry
plot(wells_sf %>% select(acres)) #it represents nothing meaningful becuase
