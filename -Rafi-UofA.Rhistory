scale_fill_brewer(name = "N", #define the legend title
palette = "Greens", #define color pallet("Blues", "BuGn",
#"BuPu", "GnBu", "Greens", "Greys"",PuBu", "PuBuGn", "PuRd", "Purples")
direction = -1) +
theme_for_map
#--- map of trial design ---#
ggplot(data = trial_design_16) +
geom_sf(aes(fill = factor(NRATE))) +
scale_fill_brewer(name = "N", #define the legend title
palette = "Greys", #define color pallet("Blues", "BuGn",
#"BuPu", "GnBu", "Greens", "Greys"",PuBu", "PuBuGn", "PuRd", "Purples")
direction = 1) +
theme_for_map
#--- map of trial design ---#
ggplot(data = trial_design_16) +
geom_sf(aes(fill = factor(NRATE))) +
scale_fill_brewer(name = "N", #define the legend title
palette = "PuBuGn", #define color pallet("Blues", "BuGn",
#"BuPu", "GnBu", "Greens", "Greys"",PuBu", "PuBuGn", "PuRd", "Purples")
direction = 1) +
theme_for_map
#--- map of trial design ---#
ggplot(data = trial_design_16) +
geom_sf(aes(fill = factor(NRATE))) +
scale_fill_brewer(name = "N", #define the legend title
palette = "GnBu", #define color pallet("Blues", "BuGn",
#"BuPu", "GnBu", "Greens", "Greys"",PuBu", "PuBuGn", "PuRd", "Purples")
direction = 1) +
theme_for_map
#--- map of trial design ---#
ggplot(data = trial_design_16) +
geom_sf(aes(fill = factor(NRATE))) +
scale_fill_brewer(name = "N", #define the legend title
palette = "BuGn", #define color pallet("Blues", "BuGn",
#"BuPu", "GnBu", "Greens", "Greys"",PuBu", "PuBuGn", "PuRd", "Purples")
direction = 1) +
theme_for_map
#--- map of trial design ---#
ggplot(data = trial_design_16) +
geom_sf(aes(fill = factor(NRATE))) +
scale_fill_brewer(name = "N", #define the legend title
palette = "BuPu", #define color pallet("Blues", "BuGn",
#"BuPu", "GnBu", "Greens", "Greys"",PuBu", "PuBuGn", "PuRd", "Purples")
direction = 1) +
theme_for_map
#--- map of trial design ---#
ggplot(data = trial_design_16) +
geom_sf(aes(fill = factor(NRATE))) +
scale_fill_brewer(name = "N", #define the legend title
palette = "OrRd", #define color pallet("Blues", "BuGn",
#"BuPu", "GnBu", "Greens", "Greys"",PuBu", "PuBuGn", "PuRd", "Purples")
direction = 1) +
theme_for_map
#--- read yield data (sf data saved as rds) ---#
yield <- readRDS("Data/chapter 1/yield.rds")
#--- read NH3 data (GeoPackage data) ---#
NH3_data <- sf::st_read("Data/chapter 1/NH3.gpkg")
#--- read ec data (shape file) ---#
ec <- sf::st_read(dsn = "Data/chapter 1", "ec")
#--- yield map ---#
g_yield <-
ggplot() +
geom_sf(data = trial_design_16) +
geom_sf(data = yield, aes(color = yield), size = 0.5) +
scale_color_distiller(name = "Yield", palette = "OrRd", direction = 1) +
theme_for_map
#--- NH3 map ---#
g_NH3 <-
ggplot() +
geom_sf(data = trial_design_16) +
geom_sf(data = NH3_data, aes(color = aa_NH3), size = 0.5) +
scale_color_distiller(name = "NH3", palette = "OrRd", direction = 1) +
theme_for_map
#--- NH3 map ---#
g_ec <-
ggplot() +
geom_sf(data = trial_design_16) +
geom_sf(data = ec, aes(color = ec), size = 0.5) +
scale_color_distiller(name = "EC", palette = "OrRd", direction = 1) +
theme_for_map
#--- stack the figures vertically and display (enabled by the patchwork package) ---#
g_yield / g_NH3 / g_ec
g_yield
g_NH3
g_ec
#--- stack the figures vertically and display (enabled by the patchwork package) ---#
g_yield / g_NH3 / g_ec
#--- NH3 map ---#
g_NH3 <-
ggplot() +
geom_sf(data = trial_design_16) +
geom_sf(data = NH3_data, aes(color = aa_NH3), size = 0.5) +
scale_color_distiller(name = "NH3", palette = "BuPu", direction = 1) +
theme_for_map
#--- NH3 map ---#
g_ec <-
ggplot() +
geom_sf(data = trial_design_16) +
geom_sf(data = ec, aes(color = ec), size = 0.5) +
scale_color_distiller(name = "EC", palette = "OrRd", direction = 1) +
theme_for_map
#--- stack the figures vertically and display (enabled by the patchwork package) ---#
g_yield / g_NH3 / g_ec
#--- yield map ---#
g_yield <-
ggplot() +
geom_sf(data = trial_design_16) +
geom_sf(data = yield, aes(color = yield), size = 0.5) +
scale_color_distiller(name = "Yield", palette = "Greens", direction = 1) +
theme_for_map
#--- NH3 map ---#
g_NH3 <-
ggplot() +
geom_sf(data = trial_design_16) +
geom_sf(data = NH3_data, aes(color = aa_NH3), size = 0.5) +
scale_color_distiller(name = "NH3", palette = "BuPu", direction = 1) +
theme_for_map
#--- NH3 map ---#
g_ec <-
ggplot() +
geom_sf(data = trial_design_16) +
geom_sf(data = ec, aes(color = ec), size = 0.5) +
scale_color_distiller(name = "EC", palette = "OrRd", direction = 1) +
theme_for_map
#--- stack the figures vertically and display (enabled by the patchwork package) ---#
g_yield / g_NH3 / g_ec
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
sf, # vector data operations
dplyr, # data wrangling
data.table, # data wrangling
tmap, # make maps
mapview, # create an interactive map
patchwork # arranging maps
)
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read(system.file("Data/Chapter 2/nc.shp", package = "sf"))
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read("Data/Chapter 2/nc.shp", package = "sf")
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read("Data/Chapter 2/nc.shp")
View(nc)
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
library(ggplot2)
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
#--- checking the data class ---#
class(nc)
#--- take a look at the data ---#
head(nc)
#--- take a look at the data ---#
head(nc)
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read(system.file("Data/Chapter 2/nc.shp"))
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read(system.file("Data/Chapter 2/nc.shp", , package = "sf"))
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read(system.file("Data/Chapter 2/nc.shp", package = "sf"))
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"))
View(nc)
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
#--- checking the data class ---#
class(nc)
#--- take a look at the data ---#
head(nc)
plot(nc)
plot(nc$AREA)
#--- plotting the nc region in map ---#
ggplot(nc$AREA) +
geom_sf() +
theme_void()
plot(nc)
plot(nc)
p1 <- nc%>%
select(AREA)
View(p1)
plot(p1)
plot(nc%>%
select(AREA))
plot(nc%>%select(AREA))
#--- take a look at the sfg package ---#
sf::st_geometry(nc[1, ])[[1]][[1]]
#--- take a look at the data ---#
head(nc)
View(nc)
View(nc)
View(nc[[15]][[1]])
plot(sf::st_geometry(nc[1, ]))
plot(sf::st_geometry(nc[2, ]))
plot(sf::st_geometry(nc[1, ]))
plot(sf::st_geometry(nc[1, ])[[1]][[1]])
plot(sf::st_geometry(nc[1, ]))
plot(sf::st_geometry(nc[15, ]))
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
sf::st_geometry(nc[15, ]+
plot(sf::st_geometry(nc[15, ])+
geom_sf(st_geometry(nc[15, ]) +
geom_sf(st_geometry(nc[15, ]) +
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
plot(nc%>%select(AREA))
plot(nc%>%select(AREA))
plot(sf::st_geometry(nc[15, ]))
dplyr::select(nc, geometry)
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
plot(nc%>%select(AREA))
#--- creating a point geometry ---#
a_point <- sf::st_point(c(2,1))
#--- check the class of the newly created item ---#
class(a_point)
plot(a_pont)
plot(a_point)
#--- creating a point geometry ---#
a_point <- sf::st_point(c(4,1))
# The st_point() function creates a POINT object when supplied with a vector
# of two numeric values
#--- check the class of the newly created item ---#
class(a_point)
plot(a_point) # plotting the point that we created.
plot(a_point) # plotting the point that we created.
#--- creating a point geometry ---#
a_point <- sf::st_point(c(14,1))
plot(a_point) # plotting the point that we created.
#--- creating line string ---#
a_linestring <- rbind((1,2),(2,3),(3,4),(4,5))
#--- creating line string ---#
a_linestring <- rbind((1,2)(2,3)(3,4)(4,5))
#--- creating line string ---#
a_linestring <- rbind((1 2)(2 3)(3 4)(4 5))
#--- creating line string ---#
a_linestring <- rbind(c(((1 ,2)(2, 3)(3, 4)(4 ,5)))
#--- creating line string ---#
a_linestring <- rbind(c(((1,2), c(2, 3), c(3, 4), c(4 ,5)))
#--- creating line string ---#
a_linestring <- rbind(c(((1,2) c(2, 3) c(3, 4) c(4 ,5)))
#--- creating line string ---#
a_linestring <- rbind(c(1,2), c(2,3), c(3,4), c(4,1))
plot(a_linestring)
View(a_linestring)
#--- creating line string ---#
a_linestring <- rbind(c(1,2), c(1,3), c(3,1), c(3,4))
plot(a_linestring)
#--- creating line string ---#
a_linestring <- rbind(c(1,2), c(1,4), c(3,2), c(3,4))
plot(a_linestring)
#--- creating line string ---#
a_linestring <- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2,5), c(2.5,3.5))
plot(a_linestring)
#--- creating line string ---#
a_linestring <- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
plot(a_linestring)
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
#--- create a "LINESTRING" ---#
a_linestring <- sf::st_linestring(var)
plot(a_linestring)
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5), c(3,2.5), c(3, 3.5), c(4, 2.5), c(4,3.5))
plot(a_linestring)
#--- create a "LINESTRING" ---#
a_linestring <- sf::st_linestring(var)
#--- check the class ---#
class(a_linestring)
#--- create a "LINESTRING" ---#
a_linestring <- sf::st_linestring(var)
View(var)
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
plot(a_linestring)
#--- create a "LINESTRING" ---#
a_linestring <- sf::st_linestring(var)
#--- check the class ---#
class(a_linestring)
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
plot(a_linestring)
#--- create a "LINESTRING" ---#
a_linestring <- sf::st_linestring(var)
plot(a_linestring)
#--- check the class ---#
class(a_linestring)
#--- create a "LINESTRING" ---#
a_linestring <- st_linestring(var)
#--- check the class ---#
class(a_linestring)
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
#--- create a "LINESTRING" ---#
a_linestring <- st_linestring(var)
#--- check the class ---#
class(a_linestring)
plot(a_linestring)
#--- creating a point geometry ---#
a_point <- st_point(c(14,1))
# The st_point() function creates a POINT object when supplied with a vector
# of two numeric values
#--- check the class of the newly created item ---#
class(a_point)
plot(a_point) # plotting the point that we created.
#--- creating line string ---#
var<- rbind(c(1.5,2.5), c(1.5,3.5), c(2.5, 2.5), c(2.5,3.5))
#--- create a "LINESTRING" ---#
a_linestring <- st_linestring(var)
#--- check the class ---#
class(a_linestring)
plot(a_linestring)
plot(var)
plot(var)+plot(a_linestring)
plot(var)/plot(a_linestring)
plot(var)+plot(a_linestring)
plot(a_linestring)
#--- creating line string ---#
var<- rbind(c(2, 3), c(3, 4), c(3, 5), c(1, 5))
#--- create a "LINESTRING" ---#
a_linestring <- st_linestring(var)
plot(a_linestring)
plot(var)
plot(a_linestring)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(3, 0), c(3, 2), c(2, 5), c(1, 3), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(p1)
#creating the polygon
a_polygon <- st_polygon(p1, needClosed = TRUE)
#creating the polygon
a_polygon <- st_polygon(p1)
#creating the polygon
a_polygon <- sf::st_polygon(p1)
#creating the polygon
a_polygon <- st_polygon(list(p1))
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(2,3), c(2,4), c(4,3), c(4,4))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(2,3), c(2,4), c(4,3), c(4,4))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(2,3), c(2,4), c(4,3), c(4,5))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(2,3), c(5,2), c(4,3), c(4,5))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(3, 0), c(3, 2), c(2, 5), c(1, 3), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(2, 3), c(2, 4), c(4, 3), c(4, 4), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(0, 3), c(0, 4), c(4, 3), c(4, 4), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(0, 3), c(0, 4), c(4, 4), c(4, 3), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(0, 3), c(0, 4), c(4, 4), c(4, 0), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
sf, # vector data operations
dplyr, # data wrangling
data.table, # data wrangling
tmap, # make maps
mapview, # create an interactive map
patchwork # arranging maps
)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
sf, # vector data operations
dplyr, # data wrangling
data.table, # data wrangling
tmap, # make maps
mapview, # create an interactive map
patchwork # arranging maps
)
library(ggplot2)
#--- a dataset that comes with the sf package ---#
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"))
#--- plotting the nc region in map ---#
ggplot(nc) +
geom_sf() +
theme_void()
plot(nc%>%select(AREA))
#--- checking the data class ---#
class(nc)
#--- take a look at the data ---#
head(nc)
#--- take a look at the sfg package ---#
sf::st_geometry(nc[1, ])[[1]][[1]]
plot(sf::st_geometry(nc[15, ]))
#--- displyaing the simple feature geometry list-column ---#
dplyr::select(nc, geometry)
#--- POINT ---#
a_point <- st_point(c(14,1))
# The st_point() function creates a POINT object when supplied with a vector
# of two numeric values
#--- check the class of the newly created item ---#
class(a_point)
plot(a_point) # plotting the point that we created.
#--- LINE STRING ---#
var<- rbind(c(2, 3), c(3, 4), c(3, 5), c(1, 5))
#--- create a "LINESTRING" ---#
a_linestring <- st_linestring(var)
#--- check the class ---#
class(a_linestring)
plot(a_linestring)
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(0, 3), c(0, 4), c(4, 4), c(4, 0), c(0, 0))
#creating the polygon
a_polygon <- st_polygon(list(p1)) # the only exception is I need to specify the word list
plot(a_polygon)
#---
#---
#---
#---
#--- MULTI-POLYGON ---#
p2 <- rbind(c(4, 0), c(5, 0), c(5, 3), c(4, 2), c(4, 0))
# create a multi polygon
multipolygon <- st_multipolygon(list(p1, p2))
# create a multi polygon
multipolygon <- st_multipolygon(list(p1), list(p2))
#--- POLYGON ---#
#--- collection of points in a matrix form ---#
p1 <- rbind(c(0, 0), c(0, 3), c(0, 4), c(4, 4), c(4, 0), c(0, 0))
#--- MULTI-POLYGON ---#
p2 <- rbind(c(4, 0), c(5, 0), c(5, 3), c(4, 2), c(4, 0))
# create a multi polygon
multipolygon <- st_multipolygon(list(p1), list(p2))
# create a multi polygon
multipolygon <- st_multipolygon(list(p1, p2))
# create a multi polygon
multipolygon <- st_multipolygon(list(list(p1), list(p2)))
plot(multipolygon)
#--- create an sfc ---#
sfc_ex <- sf::st_sfc(list(a_point, a_linestring, a_polygon, multipolygon))
plot(sfc_ex)
#--- POINT ---#
a_point <- st_point(c(4,1))
plot(a_point) # plotting the point that we created.
#--- create an sfc ---#
sfc_ex <- sf::st_sfc(list(a_point, a_linestring, a_polygon, multipolygon))
plot(sfc_ex)
View(sfc_ex)
# to create an sf object, first we need to add a column to the data frame
df_ex <- data.frame(name = c("A" , "B", "C", "D"))
# add the sfc object as a column
df_ex$geometry <- sfc_ex
# look at the data
df_ex
View(df_ex)
#--- see what it looks like (this is not an sf object yet) ---#
class(df_ex)
# this one is still a data frame. not the sf function. we need to convert it
# as a sf object
#--- let R recognize the data frame as sf ---#
sf_ex <- st_as_sf(df_ex)
#--- see what it looks like ---#
sf_ex
class(sf_ex)
# look at the data
df_ex
#--- see what it looks like (this is not an sf object yet) ---#
class(df_ex)
class(sf_ex)
plot(sf_ex)
View(sf_ex)
